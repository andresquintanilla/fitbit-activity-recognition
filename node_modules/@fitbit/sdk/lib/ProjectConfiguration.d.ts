import DiagnosticList from './DiagnosticList';
export declare enum AppType {
    APP = "app",
    CLOCKFACE = "clockface"
}
export declare const VALID_APP_TYPES: AppType[];
export declare type LocalesConfig = {
    [locale: string]: {
        name: string;
    };
};
export interface BaseProjectConfiguration {
    appType: AppType;
    appDisplayName: string;
    appUUID: string;
    requestedPermissions: string[];
    i18n: LocalesConfig;
    defaultLanguage: string;
    buildTargets: string[];
    enableProposedAPI?: true;
    appClusterID?: string;
    developerID?: string;
}
export interface AppProjectConfiguration extends BaseProjectConfiguration {
    appType: AppType.APP;
    wipeColor: string;
    iconFile: string;
}
export interface ClockProjectConfiguration extends BaseProjectConfiguration {
    appType: AppType.CLOCKFACE;
}
declare type ProjectConfiguration = AppProjectConfiguration | ClockProjectConfiguration;
export default ProjectConfiguration;
export declare const MAX_DISPLAY_NAME_LENGTH = 30;
declare enum Locales {
    'en-US' = "English (US)",
    'de-DE' = "German",
    'es-ES' = "Spanish",
    'fr-FR' = "French",
    'it-IT' = "Italian",
    'ja-JP' = "Japanese",
    'ko-KR' = "Korean",
    'nl-NL' = "Dutch",
    'sv-SE' = "Swedish",
    'zh-CN' = "Chinese (Simplified)",
    'zh-TW' = "Chinese (Traditional)"
}
export declare function normalizeLocales(locales: LocalesConfig): LocalesConfig;
export declare function normalizeProjectConfig(config: any, defaults?: Partial<AppProjectConfiguration & ClockProjectConfiguration>): ProjectConfiguration;
export declare function validateAppType(config: ProjectConfiguration): DiagnosticList;
export declare function validateDisplayName(name: string): string | true;
export declare function validateProjectDisplayName(config: ProjectConfiguration): DiagnosticList;
export declare function validateWipeColor(config: ProjectConfiguration): DiagnosticList;
export declare function validateRequestedPermissions({ enableProposedAPI, requestedPermissions, }: ProjectConfiguration): DiagnosticList;
export declare function validateBuildTarget({ buildTargets }: ProjectConfiguration, { hasNativeComponents }: {
    hasNativeComponents: boolean;
}): DiagnosticList;
export declare function validateLocaleDisplayName({ i18n }: ProjectConfiguration, localeKey: keyof typeof Locales): DiagnosticList;
export declare function validateLocaleDisplayNames(config: ProjectConfiguration): DiagnosticList;
export declare function validateSupportedLocales({ i18n }: ProjectConfiguration): DiagnosticList;
export declare function validateAppUUID({ appUUID }: ProjectConfiguration): DiagnosticList;
export declare function validateDefaultLanguage(config: ProjectConfiguration): DiagnosticList;
export declare function validateStorageGroup(config: ProjectConfiguration): DiagnosticList;
interface ValidationOptions {
    hasNativeComponents?: boolean;
}
export declare function validate(config: ProjectConfiguration, options?: ValidationOptions): DiagnosticList;
